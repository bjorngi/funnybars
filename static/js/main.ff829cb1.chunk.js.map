{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["barStyle","width","color","concat","background","funnyBars","bars","Array","fill","map","react_default","a","createElement","App_FunnyBar","getRandomColorHex","Math","floor","random","toString","getRandomIntBetween","from","to","FunnyBar","_useState","useState","_useState2","Object","slicedToArray","barWidth","setWidth","_useState3","_useState4","setColor","useEffect","timeout","setTimeout","clearTimeout","style","className","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAMMA,SAAW,SAACC,EAAOC,GAAR,MAAmB,CAClCD,MAAK,GAAAE,OAAKF,EAAL,MACLG,WAAYF,KAORG,EAAY,SAACC,GACjB,OAAOC,MAAMD,GAAME,OAAOC,IAAI,kBAAMC,EAAAC,EAAAC,cAACC,EAAD,SAahCC,EAAoB,iBAAM,IAAIC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,KAC1EC,EAAsB,SAACC,EAAMC,GAAP,OAAcN,KAAKC,MAAMD,KAAKE,UAAUI,EAAGD,GAAMA,IAEvEE,EAAW,WAAM,IAAAC,EACQC,mBAASL,EA7BpB,IADA,MA6BGM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACJI,EADIJ,EAAA,GAAAK,EAEKN,mBAASV,KAFdiB,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEd5B,EAFc6B,EAAA,GAEPC,EAFOD,EAAA,GAerB,OAXAE,oBAAU,WACR,IAAMC,EAAUC,WAAW,WACzBN,EAASV,EAlCK,IADA,MAoCda,EAASlB,MACR,KAEH,OAAO,WACLsB,aAAaF,MAKfxB,EAAAC,EAAAC,cAAA,QAAMyB,MAAOrC,EAAS4B,EAAU1B,GAAQoC,UAAU,SAKvCC,EAlCH,WACV,OACE7B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACb5B,EAAAC,EAAAC,cAAA,UAAQ0B,UAAU,cAVf/B,MAWU,IAXEC,OAAOC,IAAI,kBAAOC,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,QAAQjC,EAAU,UCApDmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff829cb1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst BAR_WIDTH_MAX=500\nconst BAR_WIDTH_MIN=100\n\nconst barStyle = (width, color) => ({\n  width: `${width}px`,\n  background: color,\n})\n\nconst funnyRows = (rows) => {\n  return Array(rows).fill().map(() => (<div className='bars'>{funnyBars(10)}</div>))\n}\n\nconst funnyBars = (bars) => {\n  return Array(bars).fill().map(() => <FunnyBar />)\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {funnyRows(20)}\n      </header>\n    </div>\n  );\n}\n\nconst getRandomColorHex = () => '#'+Math.floor(Math.random()*16777215).toString(16);\nconst getRandomIntBetween = (from, to) => Math.floor(Math.random()*(to-from)+from)\n\nconst FunnyBar = () => {\n  const [barWidth, setWidth] = useState(getRandomIntBetween(BAR_WIDTH_MIN, BAR_WIDTH_MAX))\n  const [color, setColor] = useState(getRandomColorHex())\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setWidth(getRandomIntBetween(BAR_WIDTH_MIN, BAR_WIDTH_MAX))\n      setColor(getRandomColorHex())\n    }, 2000)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  })\n\n  return (\n    <span style={barStyle(barWidth, color)} className='bar'>\n    </span>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}